{"version":3,"file":"component---src-pages-using-typescript-tsx-2208c661119cd82e9f2c.js","mappings":"iNAaA,MA+BaA,EAA0B,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,qBAExD,UAjCwDC,IAAAA,IAAC,KACvDC,EAAI,KACJC,EAAI,SACJC,GACD,SACCN,EAAAA,cAACO,EAAAA,EAAM,CAACL,MAAM,mBAAmBI,SAAUA,GACzCN,EAAAA,cAAAA,KAAAA,KAAI,0CACJA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,4BAAM,YAAe,0CAClC,4BAAM,YAAe,qCACzC,4BAAM,oBAAuB,MAEvCA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,0BAAI,cAAe,oBACxD,0BAAI,cAAe,gBAAa,0BAAI,YAAa,UAEvDA,EAAAA,cAAAA,IAAAA,KAAG,kCAC8BK,EAAK,uBAAqB,IACxDD,EAAKI,KAAKC,UAAU,KAEvBT,EAAAA,cAAAA,IAAAA,KAAG,kCAC+B,IAChCA,EAAAA,cAAAA,IAAAA,CAAGU,KAAK,yEAAwE,kCAE5E,KAGNV,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,+ECPX,MAhCoB,KAClB,MAAM,EAACC,EAAM,EAACC,IAAYC,EAAAA,EAAAA,UAAS,UAEnCC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAcC,aAAaC,QAAQ,UAAY,QACrDL,EAASG,GACTG,SAASC,gBAAgBC,aAAa,aAAcL,EAAY,GAC/D,IASH,OACE,yBAAOM,UAAU,gBACf,yBACEC,KAAK,WACLC,SAXc,KAClB,MAAMC,EAAqB,UAAVb,EAAoB,OAAS,QAC9CC,EAASY,GACTR,aAAaS,QAAQ,QAASD,GAC9BN,SAASC,gBAAgBC,aAAa,aAAcI,EAAS,EAQzDE,QAAmB,SAAVf,EACT,aAAW,iBAEb,wBAAMU,UAAU,UACd,wBAAMA,UAAU,YAAW,MAC3B,wBAAMA,UAAU,aAAY,OAExB,ECCZ,MA3Be,IAAoC,IAAnC,SAAEjB,EAAQ,MAAEJ,EAAK,SAAE2B,GAAU,EAC3C,MACMC,EADcC,WACDzB,EAAS0B,SAEtBC,EACJ,0BAAQV,UAAU,iBAChB,sBAAIA,UAAU,cACZ,gBAAC,EAAAZ,KAAI,CAACC,GAAG,KAAKV,IAEhB,uBAAKqB,UAAU,0BACb,gBAAC,EAAW,QAKlB,OACE,uBAAKA,UAAU,iBAAiB,oBAAmBO,GAChDG,EACD,4BAAOJ,GACP,8BAAQ,MACH,IAAIK,MAAOC,cAAc,eAAa,IACzC,qBAAGzB,KAAK,4BAA2B,WAEjC,C,+CCsBV,IAvCY,IAAuC,IAAD,UAArC,YAAE0B,EAAW,MAAElC,EAAK,SAAE2B,GAAU,EAC3C,MAAM,KAAErB,IAAS6B,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBF,GAAe5B,EAAK+B,aAAaH,YACnDI,EAAgC,QAApB,EAAGhC,EAAK+B,oBAAY,aAAjB,EAAmBrC,MAExC,OACE,gCACE,6BAAQsC,EAAkBtC,EAAK,MAAMsC,EAAiBtC,GACtD,wBAAMuC,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAASxC,IACnC,wBAAMyC,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAlC,EAAK+B,oBAAY,OAAQ,QAAR,EAAjB,EAAmBK,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMJ,KAAK,gBAAgBC,QAASxC,IACpC,wBAAMuC,KAAK,sBAAsBC,QAASJ,IACzCT,EACA,C","sources":["webpack://async-stream-blog/./src/pages/using-typescript.tsx","webpack://async-stream-blog/./src/components/ThemeToggle.js","webpack://async-stream-blog/./src/components/layout.js","webpack://async-stream-blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import React, { useState, useEffect } from \"react\"\n\nconst ThemeToggle = () => {\n  const [theme, setTheme] = useState(\"light\")\n\n  useEffect(() => {\n    const storedTheme = localStorage.getItem(\"theme\") || \"light\"\n    setTheme(storedTheme)\n    document.documentElement.setAttribute(\"data-theme\", storedTheme)\n  }, [])\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\"\n    setTheme(newTheme)\n    localStorage.setItem(\"theme\", newTheme)\n    document.documentElement.setAttribute(\"data-theme\", newTheme)\n  }\n\n  return (\n    <label className=\"theme-switch\">\n      <input\n        type=\"checkbox\"\n        onChange={toggleTheme}\n        checked={theme === \"dark\"}\n        aria-label=\"Toggle theme\"\n      />\n      <span className=\"slider\">\n        <span className=\"icon sun\">‚òÄÔ∏è</span>\n        <span className=\"icon moon\">üåô</span>\n      </span>\n    </label>\n  )\n}\n\nexport default ThemeToggle\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport ThemeToggle from \"./ThemeToggle\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n\n  const header = (\n    <header className=\"global-header\">\n      <h1 className=\"site-title\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n      <div className=\"theme-toggle-container\">\n        <ThemeToggle />\n      </div>\n    </header>\n  )\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      {header}\n      <main>{children}</main>\n      <footer>\n        ¬© {new Date().getFullYear()}, Built with{\" \"}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","_ref","data","path","location","Layout","site","buildTime","href","Link","to","theme","setTheme","useState","useEffect","storedTheme","localStorage","getItem","document","documentElement","setAttribute","className","type","onChange","newTheme","setItem","checked","children","isRootPath","__PATH_PREFIX__","pathname","header","Date","getFullYear","description","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter"],"sourceRoot":""}