{"version":3,"file":"component---src-pages-using-typescript-tsx-ba71fb6d51863aae941a.js","mappings":"iNAaA,MA+BaA,EAA0BA,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,qBAExD,UAjCwDC,IAAA,IAAC,KACvDC,EAAI,KACJC,EAAI,SACJC,GACDH,EAAA,OACCH,EAAAA,cAACO,EAAAA,EAAM,CAACL,MAAM,mBAAmBI,SAAUA,GACzCN,EAAAA,cAAA,UAAI,0CACJA,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,YAAM,YAAe,0CAClCA,EAAAA,cAAA,YAAM,YAAe,qCACzCA,EAAAA,cAAA,YAAM,oBAAuB,MAEvCA,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,UAAI,cAAe,oBACxDA,EAAAA,cAAA,UAAI,cAAe,gBAAaA,EAAAA,cAAA,UAAI,YAAa,UAEvDA,EAAAA,cAAA,SAAG,kCAC8BK,EAAK,uBAAqB,IACxDD,EAAKI,KAAKC,UAAU,KAEvBT,EAAAA,cAAA,SAAG,kCAC+B,IAChCA,EAAAA,cAAA,KAAGU,KAAK,yEAAwE,kCAE5E,KAGNV,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,qCCjBX,IArBeT,IAAA,IAAC,SAAEU,EAAQ,KAAEC,GAAMX,EAAA,OAChCH,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,UAAQe,UAAU,eAChBf,EAAAA,cAAA,OAAKe,UAAU,cAAa,gBAC5Bf,EAAAA,cAAA,OAAKe,UAAU,YACbf,EAAAA,cAAA,KAAGU,KAAK,KAAI,QACZV,EAAAA,cAAA,KAAGU,KAAK,UAAS,SACjBV,EAAAA,cAAA,KAAGU,KAAK,YAAW,aAItBI,EACDd,EAAAA,cAAA,OAAKe,UAAU,aACZF,GAEHb,EAAAA,cAAA,UAAQe,UAAU,eAAc,MACtB,IAAIC,MAAOC,cAAc,uCAElC,C,+CC4BL,IAvCYd,IAAuC,IAADe,EAAAC,EAAAC,EAAA,IAArC,YAAEC,EAAW,MAAEnB,EAAK,SAAEW,GAAUV,EAC3C,MAAM,KAAEK,IAASc,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBF,GAAeb,EAAKgB,aAAaH,YACnDI,EAAgC,QAApBP,EAAGV,EAAKgB,oBAAY,IAAAN,OAAA,EAAjBA,EAAmBhB,MAExC,OACEF,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQyB,EAAe,GAAGvB,OAAWuB,IAAiBvB,GACtDF,EAAAA,cAAA,QAAM0B,KAAK,cAAcC,QAASJ,IAClCvB,EAAAA,cAAA,QAAM4B,SAAS,WAAWD,QAASzB,IACnCF,EAAAA,cAAA,QAAM4B,SAAS,iBAAiBD,QAASJ,IACzCvB,EAAAA,cAAA,QAAM4B,SAAS,UAAUD,QAAQ,YACjC3B,EAAAA,cAAA,QAAM0B,KAAK,eAAeC,QAAQ,YAClC3B,EAAAA,cAAA,QACE0B,KAAK,kBACLC,SAA0B,QAAjBR,EAAAX,EAAKgB,oBAAY,IAAAL,GAAQ,QAARC,EAAjBD,EAAmBU,cAAM,IAAAT,OAAR,EAAjBA,EAA2BU,UAAW,KAEjD9B,EAAAA,cAAA,QAAM0B,KAAK,gBAAgBC,QAASzB,IACpCF,EAAAA,cAAA,QAAM0B,KAAK,sBAAsBC,QAASJ,IACzCV,EACA,C","sources":["webpack://async-stream-blog/./src/pages/using-typescript.tsx","webpack://async-stream-blog/./src/components/layout.js","webpack://async-stream-blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import React from \"react\"\nimport \"../styles/global.css\"\n\nconst Layout = ({ children, hero }) => (\n  <>\n    <header className=\"site-header\">\n      <div className=\"site-title\">Async Stream</div>\n      <nav className=\"site-nav\">\n        <a href=\"/\">Home</a>\n        <a href=\"/about\">About</a>\n        <a href=\"/contact\">Contact</a>\n      </nav>\n    </header>\n    {/* HERO OUTSIDE THE CONTAINER */}\n    {hero}\n    <div className=\"container\">\n      {children}\n    </div>\n    <footer className=\"site-footer\">\n      &copy; {new Date().getFullYear()} Async Stream. All rights reserved.\n    </footer>\n  </>\n)\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","_ref","data","path","location","Layout","site","buildTime","href","Link","to","children","hero","className","Date","getFullYear","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter"],"sourceRoot":""}