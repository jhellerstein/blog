{"version":3,"file":"component---src-pages-index-js-48e74906021ebf1d5deb.js","mappings":"wOAmCA,MA/BoBA,IAAe,IAAd,KAAEC,GAAMD,EAC3B,MAAME,GAAQC,EAAAA,EAAAA,GAASF,EAAKG,YAAYC,YACxC,OACEC,EAAAA,cAAA,MAAIC,UAAU,gBACZD,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAIR,EAAKS,OAAOC,KAAMJ,UAAU,qBACpCD,EAAAA,cAAA,OAAKC,UAAU,8BACZL,GACCI,EAAAA,cAACM,EAAAA,EAAW,CACVV,MAAOA,EACPW,IAAKZ,EAAKG,YAAYU,MACtBP,UAAU,qBACVQ,MAAO,CAAEC,YAAa,SACtBC,SAAU,CAAEC,UAAW,QAASF,YAAa,WAGjDV,EAAAA,cAAA,OAAKC,UAAU,iCACfD,EAAAA,cAAA,OAAKC,UAAU,wBACbD,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAA,YAAOL,EAAKG,YAAYe,MACxBb,EAAAA,cAAA,YAAM,KACNA,EAAAA,cAAA,YAAOL,EAAKS,OAAOU,cAErBd,EAAAA,cAAA,UAAKL,EAAKG,YAAYU,OACtBR,EAAAA,cAAA,SAAIL,EAAKG,YAAYiB,aAAepB,EAAKqB,YAI5C,EClBT,MAXaC,IAETjB,EAAAA,cAAA,OAAKC,UAAU,QACbD,EAAAA,cAAA,OAAKC,UAAU,gBACbD,EAAAA,cAAA,KAAGC,UAAU,gBAAe,wDCkEpC,MAhEkBP,IAAyB,IAADwB,EAAA,IAAvB,KAAEC,EAAI,SAAEC,GAAU1B,EACnC,MAAM2B,GAAkC,QAAtBH,EAAAC,EAAKG,KAAKC,oBAAY,IAAAL,OAAA,EAAtBA,EAAwBV,QAAS,QAC7CgB,EAAQL,EAAKM,kBAAkBC,MAuBrC,OArBAC,QAAQC,IAAI,cAAeJ,GAE3BA,EAAMK,SAAQlC,IACPA,EAAKG,YAAYC,YACpB4B,QAAQG,KAAK,+BAAgCnC,EAAKG,YAAYU,MAChE,IAGFgB,EAAMK,SAAQlC,IAEVA,EAAKG,YAAYC,aAChBJ,EAAKG,YAAYC,WAAWgC,iBAE7BJ,QAAQG,KACN,6DACAnC,EAAKG,YAAYU,MACjBb,EAAKG,YAAYC,WAErB,IAGmB,IAAjByB,EAAMQ,OAENhC,EAAAA,cAACiC,EAAAA,EAAM,CAACb,SAAUA,EAAUZ,MAAOa,EAAWa,KAAMlC,EAAAA,cAACiB,EAAI,OACvDjB,EAAAA,cAACmC,EAAAA,EAAG,CAAC3B,MAAM,cACXR,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAA,SAAOC,UAAU,WACfD,EAAAA,cAACoC,EAAAA,EAAG,OAENpC,EAAAA,cAAA,YACEA,EAAAA,cAAA,SAAG,gKAYXA,EAAAA,cAACiC,EAAAA,EAAM,CAACb,SAAUA,EAAUZ,MAAOa,EAAWa,KAAMlC,EAAAA,cAACiB,EAAI,OACvDjB,EAAAA,cAACmC,EAAAA,EAAG,CAAC3B,MAAM,cACXR,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAA,YACEA,EAAAA,cAAA,MAAIC,UAAU,YAAYQ,MAAO,CAAE4B,UAAW,SAC3Cb,EAAMc,KAAI3C,GACTK,EAAAA,cAACuC,EAAW,CAACC,IAAK7C,EAAK8C,GAAI9C,KAAMA,QAIvCK,EAAAA,cAAA,SAAOC,UAAU,WACfD,EAAAA,cAACoC,EAAAA,EAAG,QAGD,C","sources":["webpack://async-stream-blog/./src/components/PostPreview.js","webpack://async-stream-blog/./src/components/hero.js","webpack://async-stream-blog/./src/pages/index.js"],"sourcesContent":["import React from \"react\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport { Link } from \"gatsby\"\n\nconst PostPreview = ({ post }) => {\n  const image = getImage(post.frontmatter.coverImage)\n  return (\n    <li className=\"post-preview\">\n      <Link to={post.fields.slug} className=\"post-preview-link\">\n        <div className=\"post-preview-image-wrapper\">\n          {image && (\n            <GatsbyImage\n              image={image}\n              alt={post.frontmatter.title}\n              className=\"post-preview-image\"\n              style={{ aspectRatio: \"1 / 1\" }}\n              imgStyle={{ objectFit: \"cover\", aspectRatio: \"1 / 1\" }}\n            />\n          )}\n          <div className=\"post-preview-gradient-border\"></div>\n          <div className=\"post-preview-overlay\">\n            <div className=\"post-meta\">\n              <span>{post.frontmatter.date}</span>\n              <span>â€¢</span>\n              <span>{post.fields.readingTime}</span>\n            </div>\n            <h2>{post.frontmatter.title}</h2>\n            <p>{post.frontmatter.description || post.excerpt}</p>\n          </div>\n        </div>\n      </Link>\n    </li>\n  )\n}\n\nexport default PostPreview","import * as React from \"react\"\n\nconst Hero = () => {\n  return (\n    <div className=\"hero\">\n      <div className=\"hero-content\">\n        <p className=\"hero-tagline\">Occasional thoughts on coding, computing and data.</p>\n        {/* <p className=\"hero-description\">Exploring distributed systems, data management, and the intersection of human insight and automated tools.</p> */}\n      </div>\n    </div>\n  )\n}\n\nexport default Hero","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport PostPreview from \"../components/PostPreview\"\nimport Hero from \"../components/hero\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  console.log(\"POSTS DATA:\", posts);\n\n  posts.forEach(post => {\n    if (!post.frontmatter.coverImage) {\n      console.warn(\"Missing coverImage for post:\", post.frontmatter.title);\n    }\n  });\n\n  posts.forEach(post => {\n    if (\n      post.frontmatter.coverImage &&\n      !post.frontmatter.coverImage.childImageSharp\n    ) {\n      console.warn(\n        \"coverImage exists but childImageSharp is missing for post:\",\n        post.frontmatter.title,\n        post.frontmatter.coverImage\n      );\n    }\n  });\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle} hero={<Hero />}>\n        <Seo title=\"All posts\" />\n        <div className=\"home-grid\">\n          <aside className=\"sidebar\">\n            <Bio />\n          </aside>\n          <main>\n            <p>\n              No blog posts found. Add markdown posts to \"content/blog\" (or the\n              directory you specified for the \"gatsby-source-filesystem\" plugin in\n              gatsby-config.js).\n            </p>\n          </main>\n        </div>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle} hero={<Hero />}>\n      <Seo title=\"All posts\" />\n      <div className=\"home-grid\">\n        <main>\n          <ol className=\"post-list\" style={{ listStyle: `none` }}>\n            {posts.map(post => (\n              <PostPreview key={post.id} post={post} />\n            ))}\n          </ol>\n        </main>\n        <aside className=\"sidebar\">\n          <Bio />\n        </aside>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt(pruneLength: 50)\n        fields {\n          slug\n          readingTime\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          coverImage {\n            childImageSharp {\n              gatsbyImageData(\n                width: 280\n                height: 200\n                transformOptions: {fit: COVER}\n                placeholder: BLURRED\n                formats: [AUTO, WEBP]\n              )\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","post","image","getImage","frontmatter","coverImage","React","className","Link","to","fields","slug","GatsbyImage","alt","title","style","aspectRatio","imgStyle","objectFit","date","readingTime","description","excerpt","Hero","_data$site$siteMetada","data","location","siteTitle","site","siteMetadata","posts","allMarkdownRemark","nodes","console","log","forEach","warn","childImageSharp","length","Layout","hero","Seo","Bio","listStyle","map","PostPreview","key","id"],"sourceRoot":""}